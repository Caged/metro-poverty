#!/usr/bin/env node

// Include our dependencies
var d3 = require('d3'),
    shapefile = require('shapefile'),
    stats     = require('stats-lite'),
    Canvas = require('canvas'),
    Font = Canvas.Font,
    minimist = require('minimist'),
    queue = require('queue-async'),
    fs = require('fs'),
    pathname = require('path')

// Setup some options
var argv = minimist(process.argv.slice(2))
    input = argv.in,
    output = argv.out,
    width = argv.width || 2800,
    height = argv.height || 2800,
    index = 0,
    scale = 2,
    bbox = null,
    background = 'hsl(222, 10%, 8%)',
    outline    = 'hsl(222, 10%, 15%)',
    decrease   = '#85C958',
    increase   = '#C1504D'

if(!input || !output)
  return console.log("Supply arguments --in SHAPEFILE --out IMAGE");

// Define output
var outfile = fs.createWriteStream(output)

var font = new Font('OpenSans', fontFile('OpenSans-Regular'))
font.addFace(fontFile('OpenSans-Semibold'),  'bold')

// Basic canvas setup
var canvas = new Canvas(width * scale, height * scale),
    context = canvas.getContext('2d'),
    projection = d3.geo.albersUsa()

// Create a path generator for drawing tracts
var path = d3.geo.path()
  .projection(projection)
  .context(context)

var povRateScale = d3.scale.threshold()
  .domain([-60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, -60])
  .range([14, 12, 10, 8, 6, 4, 2, 2, 4, 6, 8, 10, 12, 14].map(function(d) { return d * (scale + 3) }))

// Basic styling for tracts
context.addFont(font)
context.fillStyle = background
context.strokeStyle = outline
context.lineWidth = 4
context.lineJoin = 'round'
context.font = 'bold 30px OpenSans';
context.scale(scale, scale)

// Create a solid backing
context.fillRect(0, 0, width, height)

shapefile.read(input, function render(error, collection) {
  if(error) return console.log(error)


  var details = collection.features.map(function(c) {
    var keys = Object.keys(c.properties),
        out  = {}

    keys.forEach(function(k) {
      out[k.toLowerCase()] = c.properties[k]
    })

    return out
  })

  var fullName = collection.features[0].properties.CBSA_TITLE

  scaleForBoundingBox(collection.bbox)
  renderTracts(collection.features)
  renderArrows(collection.features)
  renderSource(fullName, details)
  canvas.pngStream().pipe(outfile)
})

//  Draw an individual tract to the canvas
//
// record - A GeoJSON feature object
//
// Returns nothing
function renderTracts(tracts) {
  for (var i = 0; i < tracts.length; i++) {
    var tract = tracts[i],
        props = tract.properties


    context.beginPath()
    path(tract)

    context.fillStyle = d3.rgb(background).brighter(-0.5).toString()
    context.fill()
    context.stroke()
  }
}

function renderArrows(tracts) {
  var populations = tracts.map(function(t) { return t.properties.POP10 }),
      areas       = tracts.map(function(t) { return t.properties.ALAND10 })
      max         = stats.percentile(populations, 0.95) / stats.percentile(areas, 0.95),
      min         = stats.percentile(populations, 0.05) / stats.percentile(areas, 0.05)

  var lineWidthScale = d3.scale.linear()
        .domain([max, min])
        .range([scale, scale * 3])
        .clamp(true)

  tracts = tracts
    .sort(function(a, b) { return (a.properties.POP10 / a.properties.ALAND10) - (b.properties.POP10 / b.properties.ALAND10) })

  context.save()
  for (var i = 0; i < tracts.length; i++) {
    var tract = tracts[i],
        props = tract.properties,
        centroid    = path.centroid(tract),
        povRateDiff = (props.POV10RATE - props.POV70RATE).toFixed(1),
        pixelChange = povRateScale(povRateDiff),
        lineWidth   = lineWidthScale(props.POP10 / props.ALAND10)

    context.beginPath()
    context.lineWidth = lineWidth
    if(povRateDiff >= 0) {
      context.strokeStyle = increase
      arrow(centroid[0], centroid[1], centroid[0] + (pixelChange / .5), centroid[1] - pixelChange, lineWidth * 3)
    } else {
      context.strokeStyle = decrease
      arrow(centroid[0], centroid[1], centroid[0] - (pixelChange / .5), centroid[1] + pixelChange, lineWidth * 3)
    }

    context.stroke()
  }
  context.restore()
}

function renderSource(metro, details) {
  var label = '',
      name = pathname.basename(output).split('.')[0].replace('_', ' '),
      stats = metroAggregates(details)

  if(name == 'washington') name = 'Washintgon, D.C.'
  name = name.charAt(0).toUpperCase() + name.slice(1)

  context.save()

  context.font = 'bold 60px OpenSans';
  context.fillStyle = '#fff'
  context.fillText(name, (width - context.measureText(name).width) / 2, 90)

  label = stats.npp + '% are newly poor; ' + stats.rp + '% have rebounded'
  context.font = '36px OpenSans';
  context.fillStyle = '#999'
  context.fillText(label, (width - context.measureText(label).width) / 2, height - 150)

  label = 'Change in ' +  metro + ' area poverty: 1970-2010'
  context.font = '32px OpenSans';
  context.fillStyle = '#555'
  context.fillText(label, (width - context.measureText(label).width) / 2, height - 100)

  label = 'Source: Justin Palmer; http://labratrevenge.com/nation-of-poverty'
  context.font = '32px OpenSans';
  context.fillText(label, (width - context.measureText(label).width) / 2, height - 50)

  context.restore()
}

// Read the header.  The complexity here is smart scaling of geometry.
//
// callback - the callback to invoke after the process is complete
//
// Returns nothing
function scaleForBoundingBox(bbox) {
  projection.scale(1).translate([0, 0])

  var g = { type: "FeatureCollection",
            features: [{ type: "Feature",
            geometry: { type: "Polygon", coordinates: [[ [ bbox[0], bbox[1] ], [ bbox[0], bbox[3] ], [ bbox[2], bbox[3] ], [ bbox[2], bbox[1] ], [ bbox[0], bbox[1] ] ]] }}]}

  b = path.bounds(g)
  s = .99 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height)
  t = [(width - s * (b[1][0] + b[0][0])) / 2, (height - s * (b[1][1] + b[0][1])) / 2]

  projection.scale(s).translate(t)
}


// Draw an arrow on canvas.  See http://stackoverflow.com/a/6333775
function arrow(fromx, fromy, tox, toy, headlen) {
  var headlen = headlen || 10
  var angle = Math.atan2(toy - fromy,tox - fromx)
  context.moveTo(fromx, fromy)
  context.lineTo(tox, toy)
  context.lineTo(tox - headlen * Math.cos(angle - Math.PI / 6), toy - headlen * Math.sin(angle - Math.PI / 6))
  context.moveTo(tox, toy)
  context.lineTo(tox - headlen * Math.cos(angle + Math.PI / 6), toy - headlen * Math.sin(angle + Math.PI / 6))
}

function fontFile(name) {
  return pathname.join(__dirname, '../fonts', name + '.ttf')
}

// Format tract-level data by metro area into a more JSON-friendly format for
// later visualiation.  Also compute some aggregates across the metro area for
// rebounded tracts, newly poor, less poor, chronically poor and fallen star.
//
// The returned population, povcount and povrate properties are an array in
// decennial year order [70, 80, 90, 00, 10]
//
// tracts - An {Array} of tracts belonging to a single metro area
//
// Returns an {Array} of various statistical data about tracts
function metroAggregates(tracts) {
  var total           = tracts.length,
      years           = ['70', '80', '90', '00', '10'],
      out             = { },
      rebounded       = 0,
      lesspoor        = 0,
      chronicallypoor = 0,
      newlypoor       = 0,
      fallenstar      = 0,
      pops            = [],
      povcs           = [],
      povrs           = [],
      objs            = []

  tracts.forEach(function(tract) {
    // rb - rebounded
    // lp - less poor
    // cp - currently poor
    // np - newley poor
    // fs - fallen star
    var obj = {
      rb: 0,
      lp: 0,
      cp: 0,
      np: 0,
      fs: 0
    }

    // Convert properties like pop70, pop80, etc. into arrays
    // Round totals to nearest whole number and rates to two decimal places
    var population  = years.map(function(y) { return Math.round(tract['pop' + y]) }),
        povcount    = years.map(function(y) { return Math.round(tract['npov' + y]) }),
        povrate     = years.map(function(y) { return +tract['pov' + y + 'rate'].toFixed(2) })

    // Track all counts so we can easily get extents for the values later
    pops = pops.concat(population)
    povcs = povcs.concat(povcount)
    povrs = povrs.concat(povrate)

    // Count the classifications of each tract
    if(tract.rebounded != 'NA') {        obj.rb = 1; rebounded += 1 }
    if(tract.less_poor != 'NA') {        obj.lp = 1; lesspoor  += 1 }
    if(tract.chronically_poor != 'NA') { obj.cp = 1; chronicallypoor += 1 }
    if(tract.newly_poor != 'NA') {       obj.np = 1; newlypoor += 1 }
    if(tract.fallen_star != 'NA') {      obj.fs = 1; fallenstar += 1 }

    obj.change = +(+tract.pov70rate - +tract.pov10rate).toFixed(1)

    years.forEach(function(y) { delete tract['pov' + y + 'rate'] })

    objs.push(obj)
  })

  // out.name     = tracts[0].cbsa_title
  out.rb      = rebounded
  out.lp      = lesspoor
  out.cp      = chronicallypoor
  out.np      = newlypoor
  out.fs      = fallenstar
  out.t       = total
  out.npp     = (100 * newlypoor / total).toFixed(1)
  out.rp      = (100 * rebounded / total).toFixed(1)

  // Compute extents of all tracts belonging to this metro
  out.populationExtent = d3.extent(pops)
  out.povcountExtent = d3.extent(povcs)
  out.povrateExtent = d3.extent(povrs)

  return out
}
